module Visualizers
include("Constants.jl")
include("RadModelStructs.jl")

using .Constants, .RadModelStructs, CiaroMakie, ColorSchemes, DataFrames, JLD2, CSV

#############################################################################
##  EXPERIMENT SPACE VISUALIZERS
#############################################################################

"""
Visualizes the robot's search grid over the environment, including optional overlays of data collection paths, posterior samples, and the true source location.

This function renders a heatmap of the environment’s layout and optionally overlays valid sampling grid points, the robot’s movement path and measurements, posterior samples from MCMC chains, and the ground truth source location.

# arguments
* `environment::Environment` – The environment struct generated by `generate_robot_grid_matrix()`. It must contain a field `grid` of type `Array{Union{Bool, Int64}, 3}`, where the first two entries are the x and y coordinates of grid locations and the third entry is a Boolean indicating accessibility.

# keyword arguments
* `data_collection::Union{DataFrame, Nothing}=nothing` – A DataFrame containing the robot’s path and measured radiation values; used to visualize the robot’s trajectory.
* `chain_data::Union{Nothing, DataFrame}=nothing` – Optional posterior chain data used to visualize source belief distributions (via `viz_chain_data!`).
* `fig_size::Int=800` – Controls the pixel resolution of the output figure.
* `show_grid::Bool=true` – If `true`, plots the robot’s valid sampling grid locations.
* `x₀::Union{Vector{Float64}, Nothing}=nothing` – If provided, marks the true source location as a red × marker.

# returns
* `Figure` – A `CairoMakie.Figure` object visualizing the environment, optionally overlaid with robot sampling grid, collected data, posterior beliefs, and source location.
"""
function viz_robot_grid(
	environment; 
	data_collection::Union{DataFrame, Nothing}=nothing,
	chain_data::Union{Nothing, DataFrame}=nothing,
	fig_size::Int=800,
	show_grid::Bool=true,
	x₀::Union{Vector{Float64}, Nothing}=nothing
)
    fig = Figure(size=(fig_size, fig_size))
    ax = Axis(fig[1, 1], aspect=DataAspect(), title="rad source search space")

    heatmap!(ax, environment.masked_env; colormap=:grays)

    n_valid = count(environment.grid[:, :, 3] .== true)

    xs = zeros(Float64, n_valid)
    ys = zeros(Float64, n_valid)

    idx = 1
	if show_grid
		#loop through the grid and add true values to the scatter plot
	    for i in 1:size(environment.grid, 1), j in 1:size(environment.grid, 2)
	        if environment.grid[j, i, 3] == true
	            xs[idx] = environment.grid[i, j, 1]
	            ys[idx] = environment.grid[i, j, 2]
	            idx += 1
	        end
	    end
		scatter!(ax, xs, ys; color = :cyan, markersize = 10, label="search grid sampling point")
		if isnothing(x₀)
			axislegend(ax, position=:lb)
		end
	end

	if ! isnothing(chain_data)
		viz_chain_data!(ax, chain_data, show_source=false)
	end

	if !isnothing(data_collection)
		#TODO: use viz_path!() to visualize the data collection
		sc = viz_path!(ax, data_collection)
		Colorbar(fig[1, 2], sc, label = "counts")
	end

	if !isnothing(x₀)
		scatter!(ax, [x₀[1]], [x₀[2]], color="red", marker=:xcross, markersize=15, label="source", strokewidth=1)
		axislegend(ax, position=:lb)
	end

    return fig
end


#############################################################################
##  MODEL VISUALIZERS
#############################################################################


end